


## 4. ü™ù Custom Hook for Editor Integration

### `/src/hooks/useContinue.ts`

```ts
import { useEffect, useState } from "react";
import { getContinueClient } from "@/lib/continueClient";

export const useContinue = () => {
  const [continueClient, setContinueClient] = useState<ReturnType<typeof getContinueClient> | null>(null);

  useEffect(() => {
    const client = getContinueClient();
    setContinueClient(client);

    // Clean up listener on unmount
    return () => {
      client.removeAllListeners();
    };
  }, []);

  const registerEditorContext = (context: any) => {
    // Attach current editor context globally for Continue
    (window as any).editorContext = context;
  };

  const onCompletion = (callback: (completion: any) => void) => {
    if (continueClient) {
      continueClient.on("completion", callback);
    }
  };

  return {
    continueClient,
    registerEditorContext,
    onCompletion,
  };
};
```

---

## 5. üß© Context Provider for Editor State

### `/src/contexts/EditorContext.tsx`

```tsx
import { createContext, useContext, useState } from "react";
import { useContinue } from "@/hooks/useContinue";

interface EditorContextType {
  activeFile: string;
  projectStructure: string[];
  terminalHistory: string[];
  updateActiveFile: (file: string) => void;
  updateProjectStructure: (structure: string[]) => void;
  updateTerminalHistory: (history: string[]) => void;
}

const EditorContext = createContext<EditorContextType | undefined>(undefined);

export const EditorProvider = ({ children }: { children: React.ReactNode }) => {
  const [activeFile, setActiveFile] = useState("");
  const [projectStructure, setProjectStructure] = useState<string[]>([]);
  const [terminalHistory, setTerminalHistory] = useState<string[]>([]);

  const { registerEditorContext } = useContinue();

  useEffect(() => {
    registerEditorContext({
      files: [{ path: activeFile, content: "" }],
      projectStructure,
      terminalOutput: terminalHistory.join("\n"),
    });
  }, [activeFile, projectStructure, terminalHistory]);

  return (
    <EditorContext.Provider
      value={{
        activeFile,
        projectStructure,
        terminalHistory,
        updateActiveFile: setActiveFile,
        updateProjectStructure: setProjectStructure,
        updateTerminalHistory: setTerminalHistory,
      }}
    >
      {children}
    </EditorContext.Provider>
  );
};

export const useEditorContext = () => {
  const context = useContext(EditorContext);
  if (!context) throw new Error("useEditorContext must be used within EditorProvider");
  return context;
};
```

---

## 6. üí¨ AI Assistant Component with Streaming

### `/src/components/ai/AIAssistant.tsx`

```tsx
"use client";

import React, { useState } from "react";
import { useContinue } from "@/hooks/useContinue";

export const AIAssistant = () => {
  const [input, setInput] = useState("");
  const [response, setResponse] = useState("");
  const { continueClient } = useContinue();

  const handleSend = async () => {
    if (!input.trim()) return;

    try {
      await continueClient.run(
        {
          messages: [{ role: "user", content: input }],
        },
        (chunk) => {
          setResponse((prev) => prev + chunk.content);
        }
      );
    } catch (error) {
      console.error("Error generating response:", error);
    }
  };

  return (
    <div className="p-4 border rounded-md">
      <h3 className="font-bold mb-2">AI Assistant</h3>
      <textarea
        value={input}
        onChange={(e) => setInput(e.target.value)}
        placeholder="Ask for help with code..."
        className="w-full p-2 border rounded-md"
      />
      <button onClick={handleSend} className="mt-2 px-4 py-2 bg-blue-500 text-white rounded-md">
        Send
      </button>
      <div className="mt-4 whitespace-pre-wrap">{response}</div>
    </div>
  );
};
```

---

## 7. üßæ TypeScript Types (Optional)

### `/src/types/continue.d.ts`

```ts
declare global {
  interface Window {
    editorContext: {
      files: Array<{
        path: string;
        content: string;
      }>;
      projectStructure: string[];
      terminalOutput: string;
    };
  }
}

export {};
```

---

## 8. üõ†Ô∏è Add to Main App Layout

### Wrap your app with the editor context provider

#### `/src/app/layout.tsx` or `_app.tsx`

```tsx
import { EditorProvider } from "@/contexts/EditorContext";

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body>
        <EditorProvider>{children}</EditorProvider>
      </body>
    </html>
  );
}
```

