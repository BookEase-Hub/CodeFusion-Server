tests/auth.test.js`
```javascript
const request = require('supertest');
const app = require('../app');
const User = require('../models/User');

describe('Authentication', () => {
  beforeEach(async () => {
    await User.deleteMany({});
  });

  it('should register a new user', async () => {
    const res = await request(app)
      .post('/api/v1/register')
      .send({
        name: 'Test User',
        email: 'test@example.com',
        password: 'password123'
      });
    expect(res.statusCode).toEqual(200);
    expect(res.body).toHaveProperty('token');
  });

  it('should not register with invalid email', async () => {
    const res = await request(app)
      .post('/api/v1/register')
      .send({
        name: 'Test User',
        email: 'invalid-email',
        password: 'password123'
      });
    expect(res.statusCode).toEqual(400);
    expect(res.body).toHaveProperty('error');
  });

  // Add more tests...
});
```

---

### `tests/file.test.js`
```javascript
const request = require('supertest');
const app = require('../app');
const User = require('../models/User');
const Project = require('../models/Project');
const File = require('../models/File');

describe('File Operations', () => {
  let token;
  let projectId;

  beforeAll(async () => {
    // Create test user and get token
    await request(app)
      .post('/api/v1/register')
      .send({
        name: 'File Test User',
        email: 'filetest@example.com',
        password: 'password123'
      });
    const loginRes = await request(app)
      .post('/api/v1/login')
      .send({
        email: 'filetest@example.com',
        password: 'password123'
      });
    token = loginRes.body.token;
    // Create test project
    const projectRes = await request(app)
      .post('/api/v1/projects')
      .set('Authorization', `Bearer ${token}`)
      .send({
        name: 'Test Project',
        description: 'Test project for file operations',
        language: 'javascript'
      });
    projectId = projectRes.body._id;
  });

  it('should create a new file', async () => {
    const res = await request(app)
      .post('/api/v1/files')
      .set('Authorization', `Bearer ${token}`)
      .send({
        name: 'test.js',
        projectId,
        content: 'console.log("Hello");',
        language: 'javascript'
      });
    expect(res.statusCode).toEqual(200);
    expect(res.body).toHaveProperty('_id');
  });

  // Add more tests...
});
```

---

### `Dockerfile`
```dockerfile
# Build stage
FROM node:18 as builder

WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY . .
RUN npm run build

# Runtime stage
FROM node:18-slim

WORKDIR /app
COPY --from=builder /app .

ENV NODE_ENV=production
ENV PORT=3000

EXPOSE 3000
CMD ["node", "server.js"]
```

---

### `.github/workflows/deploy.yml`
```yaml
name: Deploy to Production

on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '18'
      - run: npm ci
      - run: npm test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '18'
      - run: npm ci
      - run: npm run build
      - uses: azure/webapps-deploy@v2
        with:
          app-name: 'codefusion'
          slot-name: 'production'
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: .
```

---

### `lib/continueClient.ts`
```typescript
import { Continue } from "continue-client";

// Create a singleton instance
let continueInstance: Continue | null = null;

export const getContinueClient = () => {
  if (!continueInstance) {
    continueInstance = new Continue({
      model: "continue-model", // or specify OpenAI, etc.
      contextProvider: async () => {
        return window.editorContext || {};
      },
    });

    void continueInstance.init();
  }

  return continueInstance;
};
```

---

### `hooks/useContinue.ts`
```typescript
import { useEffect, useState } from "react";
import { getContinueClient } from "@/lib/continueClient";

export const useContinue = () => {
  const [continueClient, setContinueClient] = useState<ReturnType<typeof getContinueClient> | null>(null);

  useEffect(() => {
    const client = getContinueClient();
    setContinueClient(client);

    // Clean up listener on unmount
    return () => {
      client.removeAllListeners();
    };
  }, []);

  const registerEditorContext = (context: any) => {
    // Attach current editor context globally for Continue
    (window as any).editorContext = context;
  };

  const onCompletion = (callback: (completion: any) => void) => {
    if (continueClient) {
      continueClient.on("completion", callback);
    }
  };

  return {
    continueClient,
    registerEditorContext,
    onCompletion,
  };
};
```

---

### `contexts/EditorContext.tsx`
```typescript
import { createContext, useContext, useState, useEffect } from "react";
import { useContinue } from "@/hooks/useContinue";

interface EditorContextType {
  activeFile: string;
  projectStructure: string[];
  terminalHistory: string[];
  updateActiveFile: (file: string) => void;
  updateProjectStructure: (structure: string[]) => void;
  updateTerminalHistory: (history: string[]) => void;
}

const EditorContext = createContext<EditorContextType | undefined>(undefined);

export const EditorProvider = ({ children }: { children: React.ReactNode }) => {
  const [activeFile, setActiveFile] = useState("");
  const [projectStructure, setProjectStructure] = useState<string[]>([]);
  const [terminalHistory, setTerminalHistory] = useState<string[]>([]);

  const { registerEditorContext } = useContinue();

  useEffect(() => {
    registerEditorContext({
      files: [{ path: activeFile, content: "" }],
      projectStructure,
      terminalOutput: terminalHistory.join("\n"),
    });
  }, [activeFile, projectStructure, terminalHistory]);

  return (
    <EditorContext.Provider
      value={{
        activeFile,
        projectStructure,
        terminalHistory,
        updateActiveFile: setActiveFile,
        updateProjectStructure: setProjectStructure,
        updateTerminalHistory: setTerminalHistory,
      }}
    >
      {children}
    </EditorContext.Provider>
  );
};

export const useEditorContext = () => {
  const context = useContext(EditorContext);
  if (!context) throw new Error("useEditorContext must be used within EditorProvider");
  return context;
};
```

---

### `components/AIAssistant.tsx`
```typescript
"use client";

import React, { useState } from "react";
import { useContinue } from "@/hooks/useContinue";

export const AIAssistant = () => {
  const [input, setInput] = useState("");
  const [response, setResponse] = useState("");
  const { continueClient } = useContinue();

  const handleSend = async () => {
    if (!input.trim()) return;

    try {
      await continueClient.run(
        {
          messages: [{ role: "user", content: input }],
        },
        (chunk) => {
          setResponse((prev) => prev + chunk.content);
        }
      );
    } catch (error) {
      console.error("Error generating response:", error);
    }
  };

  return (
    <div className="p-4 border rounded-md">
      <h3 className="font-bold mb-2">AI Assistant</h3>
      <textarea
        value={input}
        onChange={(e) => setInput(e.target.value)}
        placeholder="Ask for help with code..."
        className="w-full p-2 border rounded-md"
      />
      <button onClick={handleSend} className="mt-2 px-4 py-2 bg-blue-500 text-white rounded-md">
        Send
      </button>
      <div className="mt-4 whitespace-pre-wrap">{response}</div>
    </div>
  );
};
```

---

### `types/global.d.ts`
```typescript
declare global {
  interface Window {
    editorContext: {
      files: Array<{
        path: string;
        content: string;
      }>;
      projectStructure: string[];
      terminalOutput: string;
    };
  }
}

export {};
```

---

### `app/layout.tsx`
```typescript
import { EditorProvider } from "@/contexts/EditorContext";

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body>
        <EditorProvider>{children}</EditorProvider>
      </body>
    </html>
  );
}
```

---

### `components/TestContinueButton.tsx`
```typescript
"use client";

import { useContinue } from "@/hooks/useContinue";

export const TestContinueButton = () => {
  const { continueClient } = useContinue();

  const testPrompt = async () => {
    await continueClient.run(
      {
        messages: [{ role: "user", content: "Write a function to reverse a string in JavaScript" }],
      },
      (chunk) => {
        console.log("Received chunk:", chunk);
      }
    );
  };

  return (
    <button onClick={testPrompt} className="px-4 py-2 bg-green-500 text-white rounded-md">
      Test Continue
    </button>
  );
};
```

---

### `Mermaid Diagram and Related Code`
```typescript
// AI returns Mermaid code in response
const aiResponse = await continueClient.run({
  messages: [{ role: "user", content: "Draw a flowchart of my app architecture" }],
});

// Response includes Mermaid diagram
const mermaidCode = aiResponse.content.includes("```mermaid") ? extractMermaid(aiResponse.content) : null;

if (mermaidCode) {
  // Send back Mermaid code to be rendered
  setMessages((prev) => [...prev, { type: 'mermaid', code: mermaidCode }]);
}

<CodeMirror
  value={mermaidCode}
  extensions={[javascript(), html(), python()]}
  onChange={(value) => setMermaidCode(value)}
/>

await fetch('/api/projects/save-diagram', {
  method: 'POST',
  body: JSON.stringify({ projectId, mermaidCode }),
});

function exportSVG() {
  const svgElement = document.querySelector('.mermaid-diagram svg');
  const serializer = new XMLSerializer();
  const svgString = serializer.serializeToString(svgElement);
  const blob = new Blob([svgString], { type: 'image/svg+xml' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = 'diagram.svg';
  link.click();
}
```

---

### `Mermaid Diagram`
```mermaid
graph TD
  subgraph Frontend
    A[Universal Keyboard UI] -->|Commands| B(Command Dispatcher)
    C[Voice Interface] -->|Transcripts| B
    D[Bot Interface] -->|Natural Language| B
  end

  subgraph Backend
    B -->|Routes| E[API Endpoints]
    E --> F[Command Processor]
    F --> G[File System Abstraction]
    G --> H[Local File System]
    G --> I[Cloud Storage]
    F --> J[Shortcut Manager]
    F --> K[Voice Processor]
    F --> L[Bot Engine]
    F --> M[Cloud Sync]
  end

  subgraph External
    H -->|Files| N[User Devices]
    I -->|Files| O[GitHub/GitLab/S3]
    M -->|Sync| P[WebSockets]
  end
```

---

This is the complete regeneration of the provided codebase, with all files, structures, and content preserved exactly as given. Let me know if you need further assistance or modifications!
