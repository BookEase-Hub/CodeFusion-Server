contexts/EditorContext.tsx
```typescript
import { createContext, useContext, useState, useEffect } from "react";
import { useContinue } from "@/hooks/useContinue";

interface EditorContextType {
  activeFile: string;
  projectStructure: string[];
  terminalHistory: string[];
  updateActiveFile: (file: string) => void;
  updateProjectStructure: (structure: string[]) => void;
  updateTerminalHistory: (history: string[]) => void;
}

const EditorContext = createContext<EditorContextType | undefined>(undefined);

export const EditorProvider = ({ children }: { children: React.ReactNode }) => {
  const [activeFile, setActiveFile] = useState("");
  const [projectStructure, setProjectStructure] = useState<string[]>([]);
  const [terminalHistory, setTerminalHistory] = useState<string[]>([]);

  const { registerEditorContext } = useContinue();

  useEffect(() => {
    registerEditorContext({
      files: [{ path: activeFile, content: "" }],
      projectStructure,
      terminalOutput: terminalHistory.join("\n"),
    });
  }, [activeFile, projectStructure, terminalHistory]);

  return (
    <EditorContext.Provider
      value={{
        activeFile,
        projectStructure,
        terminalHistory,
        updateActiveFile: setActiveFile,
        updateProjectStructure: setProjectStructure,
        updateTerminalHistory: setTerminalHistory,
      }}
    >
      {children}
    </EditorContext.Provider>
  );
};

export const useEditorContext = () => {
  const context = useContext(EditorContext);
  if (!context) throw new Error("useEditorContext must be used within EditorProvider");
  return context;
};
```

---

### `components/AIAssistant.tsx`
```typescript
"use client";

import React, { useState } from "react";
import { useContinue } from "@/hooks/useContinue";

export const AIAssistant = () => {
  const [input, setInput] = useState("");
  const [response, setResponse] = useState("");
  const { continueClient } = useContinue();

  const handleSend = async () => {
    if (!input.trim()) return;

    try {
      await continueClient.run(
        {
          messages: [{ role: "user", content: input }],
        },
        (chunk) => {
          setResponse((prev) => prev + chunk.content);
        }
      );
    } catch (error) {
      console.error("Error generating response:", error);
    }
  };

  return (
    <div className="p-4 border rounded-md">
      <h3 className="font-bold mb-2">AI Assistant</h3>
      <textarea
        value={input}
        onChange={(e) => setInput(e.target.value)}
        placeholder="Ask for help with code..."
        className="w-full p-2 border rounded-md"
      />
      <button onClick={handleSend} className="mt-2 px-4 py-2 bg-blue-500 text-white rounded-md">
        Send
      </button>
      <div className="mt-4 whitespace-pre-wrap">{response}</div>
    </div>
  );
};
```

---

### `types/global.d.ts`
```typescript
declare global {
  interface Window {
    editorContext: {
      files: Array<{
        path: string;
        content: string;
      }>;
      projectStructure: string[];
      terminalOutput: string;
    };
  }
}

export {};
```

---

### `app/layout.tsx`
```typescript
import { EditorProvider } from "@/contexts/EditorContext";

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body>
        <EditorProvider>{children}</EditorProvider>
      </body>
    </html>
  );
}
```

---

### `components/TestContinueButton.tsx`
```typescript
"use client";

import { useContinue } from "@/hooks/useContinue";

export const TestContinueButton = () => {
  const { continueClient } = useContinue();

  const testPrompt = async () => {
    await continueClient.run(
      {
        messages: [{ role: "user", content: "Write a function to reverse a string in JavaScript" }],
      },
      (chunk) => {
        console.log("Received chunk:", chunk);
      }
    );
  };

  return (
    <button onClick={testPrompt} className="px-4 py-2 bg-green-500 text-white rounded-md">
      Test Continue
    </button>
  );
};
```

---

### `Mermaid Diagram and Related Code`
```typescript
// AI returns Mermaid code in response
const aiResponse = await continueClient.run({
  messages: [{ role: "user", content: "Draw a flowchart of my app architecture" }],
});

// Response includes Mermaid diagram
const mermaidCode = aiResponse.content.includes("```mermaid") ? extractMermaid(aiResponse.content) : null;

if (mermaidCode) {
  // Send back Mermaid code to be rendered
  setMessages((prev) => [...prev, { type: 'mermaid', code: mermaidCode }]);
}

<CodeMirror
  value={mermaidCode}
  extensions={[javascript(), html(), python()]}
  onChange={(value) => setMermaidCode(value)}
/>

await fetch('/api/projects/save-diagram', {
  method: 'POST',
  body: JSON.stringify({ projectId, mermaidCode }),
});

function exportSVG() {
  const svgElement = document.querySelector('.mermaid-diagram svg');
  const serializer = new XMLSerializer();
  const svgString = serializer.serializeToString(svgElement);
  const blob = new Blob([svgString], { type: 'image/svg+xml' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = 'diagram.svg';
  link.click();
}
```

---

### `Mermaid Diagram`
```mermaid
graph TD
  subgraph Frontend
    A[Universal Keyboard UI] -->|Commands| B(Command Dispatcher)
    C[Voice Interface] -->|Transcripts| B
    D[Bot Interface] -->|Natural Language| B
  end

  subgraph Backend
    B -->|Routes| E[API Endpoints]
    E --> F[Command Processor]
    F --> G[File System Abstraction]
    G --> H[Local File System]
    G --> I[Cloud Storage]
    F --> J[Shortcut Manager]
    F --> K[Voice Processor]
    F --> L[Bot Engine]
    F --> M[Cloud Sync]
  end

  subgraph External
    H -->|Files| N[User Devices]
    I -->|Files| O[GitHub/GitLab/S3]
    M -->|Sync| P[WebSockets]
  end
```

---

This is the complete regeneration of the provided codebase, with all files, structures, and content preserved exactly as given. Let me know if you need further assistance or modifications!
